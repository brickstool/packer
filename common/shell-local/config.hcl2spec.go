// Code generated by "hcl2-schema -type Config"; DO NOT EDIT.\n

package shell_local

import (
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Command":           &hcldec.AttrSpec{Name: "command", Type: cty.String, Required: false},
		"Inline":            &hcldec.AttrSpec{Name: "inline", Type: cty.List(cty.String), Required: false},
		"InlineShebang":     &hcldec.AttrSpec{Name: "inline_shebang", Type: cty.String, Required: false},
		"OnlyOn":            &hcldec.AttrSpec{Name: "only_on", Type: cty.List(cty.String), Required: false},
		"TempfileExtension": &hcldec.AttrSpec{Name: "tempfile_extension", Type: cty.String, Required: false},
		"Script":            &hcldec.AttrSpec{Name: "script", Type: cty.String, Required: false},
		"Scripts":           &hcldec.AttrSpec{Name: "scripts", Type: cty.List(cty.String), Required: false},
		"Vars":              &hcldec.AttrSpec{Name: "environment_vars", Type: cty.List(cty.String), Required: false},
		"EnvVarFormat":      &hcldec.AttrSpec{Name: "env_var_format", Type: cty.String, Required: false},
		"ExecuteCommand":    &hcldec.AttrSpec{Name: "execute_command", Type: cty.List(cty.String), Required: false},
		"UseLinuxPathing":   &hcldec.AttrSpec{Name: "use_linux_pathing", Type: cty.Bool, Required: false},
	}
	return s
}
