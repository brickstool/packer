// Code generated by "hcl2-schema -type RunConfig,SecurityGroupFilterOptions,OmiFilterOptions,SubnetFilterOptions,NetFilterOptions"; DO NOT EDIT.\n

package common

import (
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*RunConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"AssociatePublicIpAddress":    &hcldec.AttrSpec{Name: "associate_public_ip_address", Type: cty.Bool, Required: false},
		"Subregion":                   &hcldec.AttrSpec{Name: "subregion_name", Type: cty.String, Required: false},
		"BlockDurationMinutes":        &hcldec.AttrSpec{Name: "block_duration_minutes", Type: cty.Number, Required: false},
		"DisableStopVm":               &hcldec.AttrSpec{Name: "disable_stop_vm", Type: cty.Bool, Required: false},
		"BsuOptimized":                &hcldec.AttrSpec{Name: "bsu_optimized", Type: cty.Bool, Required: false},
		"EnableT2Unlimited":           &hcldec.AttrSpec{Name: "enable_t2_unlimited", Type: cty.Bool, Required: false},
		"IamVmProfile":                &hcldec.AttrSpec{Name: "iam_vm_profile", Type: cty.String, Required: false},
		"VmInitiatedShutdownBehavior": &hcldec.AttrSpec{Name: "shutdown_behavior", Type: cty.String, Required: false},
		"VmType":                      &hcldec.AttrSpec{Name: "vm_type", Type: cty.String, Required: false},
		"RunTags":                     &hcldec.BlockAttrsSpec{TypeName: "run_tags", ElementType: cty.String, Required: false},
		"SecurityGroupId":             &hcldec.AttrSpec{Name: "security_group_id", Type: cty.String, Required: false},
		"SecurityGroupIds":            &hcldec.AttrSpec{Name: "security_group_ids", Type: cty.List(cty.String), Required: false},
		"SourceOmi":                   &hcldec.AttrSpec{Name: "source_omi", Type: cty.String, Required: false},
		"SpotPrice":                   &hcldec.AttrSpec{Name: "spot_price", Type: cty.String, Required: false},
		"SpotPriceAutoProduct":        &hcldec.AttrSpec{Name: "spot_price_auto_product", Type: cty.String, Required: false},
		"SpotTags":                    &hcldec.BlockAttrsSpec{TypeName: "spot_tags", ElementType: cty.String, Required: false},
		"SubnetId":                    &hcldec.AttrSpec{Name: "subnet_id", Type: cty.String, Required: false},
		"TemporaryKeyPairName":        &hcldec.AttrSpec{Name: "temporary_key_pair_name", Type: cty.String, Required: false},
		"TemporarySGSourceCidr":       &hcldec.AttrSpec{Name: "temporary_security_group_source_cidr", Type: cty.String, Required: false},
		"UserData":                    &hcldec.AttrSpec{Name: "user_data", Type: cty.String, Required: false},
		"UserDataFile":                &hcldec.AttrSpec{Name: "user_data_file", Type: cty.String, Required: false},
		"NetId":                       &hcldec.AttrSpec{Name: "net_id", Type: cty.String, Required: false},
		"WindowsPasswordTimeout":      &hcldec.AttrSpec{Name: "windows_password_timeout", Type: cty.String, Required: false},
		"SSHInterface":                &hcldec.AttrSpec{Name: "ssh_interface", Type: cty.String, Required: false},
		"security_group_filter":       &hcldec.BlockObjectSpec{TypeName: "SecurityGroupFilterOptions", LabelNames: []string(nil), Nested: hcldec.ObjectSpec((&RunConfig{}).SecurityGroupFilter.HCL2Spec())},
		"source_omi_filter":           &hcldec.BlockObjectSpec{TypeName: "OmiFilterOptions", LabelNames: []string(nil), Nested: hcldec.ObjectSpec((&RunConfig{}).SourceOmiFilter.HCL2Spec())},
		"subnet_filter":               &hcldec.BlockObjectSpec{TypeName: "SubnetFilterOptions", LabelNames: []string(nil), Nested: hcldec.ObjectSpec((&RunConfig{}).SubnetFilter.HCL2Spec())},
		"net_filter":                  &hcldec.BlockObjectSpec{TypeName: "NetFilterOptions", LabelNames: []string(nil), Nested: hcldec.ObjectSpec((&RunConfig{}).NetFilter.HCL2Spec())},
	}
	return s
}

func (*SecurityGroupFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters": &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
	}
	return s
}

func (*OmiFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters":    &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
		"Owners":     &hcldec.AttrSpec{Name: "owners", Type: cty.List(cty.String), Required: false},
		"MostRecent": &hcldec.AttrSpec{Name: "most_recent", Type: cty.Bool, Required: false},
	}
	return s
}

func (*SubnetFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters":  &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
		"MostFree": &hcldec.AttrSpec{Name: "most_free", Type: cty.Bool, Required: false},
		"Random":   &hcldec.AttrSpec{Name: "random", Type: cty.Bool, Required: false},
	}
	return s
}

func (*NetFilterOptions) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Filters": &hcldec.BlockAttrsSpec{TypeName: "filters", ElementType: cty.String, Required: false},
	}
	return s
}
