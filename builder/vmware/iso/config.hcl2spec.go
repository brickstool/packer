// Code generated by "hcl2-schema -type Config"; DO NOT EDIT.\n

package iso

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"AdditionalDiskSize":  &hcldec.AttrSpec{Name: "disk_additional_size", Type: cty.List(cty.Number), Required: false},
		"DiskAdapterType":     &hcldec.AttrSpec{Name: "disk_adapter_type", Type: cty.String, Required: false},
		"DiskName":            &hcldec.AttrSpec{Name: "vmdk_name", Type: cty.String, Required: false},
		"DiskSize":            &hcldec.AttrSpec{Name: "disk_size", Type: cty.Number, Required: false},
		"DiskTypeId":          &hcldec.AttrSpec{Name: "disk_type_id", Type: cty.String, Required: false},
		"Format":              &hcldec.AttrSpec{Name: "format", Type: cty.String, Required: false},
		"CdromAdapterType":    &hcldec.AttrSpec{Name: "cdrom_adapter_type", Type: cty.String, Required: false},
		"GuestOSType":         &hcldec.AttrSpec{Name: "guest_os_type", Type: cty.String, Required: false},
		"Version":             &hcldec.AttrSpec{Name: "version", Type: cty.String, Required: false},
		"VMName":              &hcldec.AttrSpec{Name: "vm_name", Type: cty.String, Required: false},
		"VMXDiskTemplatePath": &hcldec.AttrSpec{Name: "vmx_disk_template_path", Type: cty.String, Required: false},
		"VMXTemplatePath":     &hcldec.AttrSpec{Name: "vmx_template_path", Type: cty.String, Required: false},
	}
	for k, v := range (&Config{}).HTTPConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ISOConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).FloppyConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).VNCConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).DriverConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).HWConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).OutputConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).RunConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ShutdownConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).SSHConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ToolsConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).VMXConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ExportConfig.HCL2Spec() {
		s[k] = v
	}
	return s
}
