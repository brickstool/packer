// Code generated by "hcl2-schema -type Config"; DO NOT EDIT.\n

package vmx

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Linked":     &hcldec.AttrSpec{Name: "linked", Type: cty.Bool, Required: false},
		"RemoteType": &hcldec.AttrSpec{Name: "remote_type", Type: cty.String, Required: false},
		"SourcePath": &hcldec.AttrSpec{Name: "source_path", Type: cty.String, Required: false},
		"VMName":     &hcldec.AttrSpec{Name: "vm_name", Type: cty.String, Required: false},
	}
	for k, v := range (&Config{}).HTTPConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).FloppyConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).VNCConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).DriverConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).OutputConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).RunConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ShutdownConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).SSHConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ToolsConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).VMXConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ExportConfig.HCL2Spec() {
		s[k] = v
	}
	return s
}
