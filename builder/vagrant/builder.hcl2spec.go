// Code generated by "hcl2-schema -type Config"; DO NOT EDIT.\n

package vagrant

import (
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"OutputDir":         &hcldec.AttrSpec{Name: "output_dir", Type: cty.String, Required: false},
		"SourceBox":         &hcldec.AttrSpec{Name: "source_path", Type: cty.String, Required: false},
		"GlobalID":          &hcldec.AttrSpec{Name: "global_id", Type: cty.String, Required: false},
		"Checksum":          &hcldec.AttrSpec{Name: "checksum", Type: cty.String, Required: false},
		"ChecksumType":      &hcldec.AttrSpec{Name: "checksum_type", Type: cty.String, Required: false},
		"BoxName":           &hcldec.AttrSpec{Name: "box_name", Type: cty.String, Required: false},
		"Provider":          &hcldec.AttrSpec{Name: "provider", Type: cty.String, Required: false},
		"Communicator":      &hcldec.AttrSpec{Name: "communicator", Type: cty.String, Required: false},
		"VagrantfileTpl":    &hcldec.AttrSpec{Name: "vagrantfile_template", Type: cty.String, Required: false},
		"TeardownMethod":    &hcldec.AttrSpec{Name: "teardown_method", Type: cty.String, Required: false},
		"BoxVersion":        &hcldec.AttrSpec{Name: "box_version", Type: cty.String, Required: false},
		"Template":          &hcldec.AttrSpec{Name: "template", Type: cty.String, Required: false},
		"SyncedFolder":      &hcldec.AttrSpec{Name: "synced_folder", Type: cty.String, Required: false},
		"SkipAdd":           &hcldec.AttrSpec{Name: "skip_add", Type: cty.Bool, Required: false},
		"AddCACert":         &hcldec.AttrSpec{Name: "add_cacert", Type: cty.String, Required: false},
		"AddCAPath":         &hcldec.AttrSpec{Name: "add_capath", Type: cty.String, Required: false},
		"AddCert":           &hcldec.AttrSpec{Name: "add_cert", Type: cty.String, Required: false},
		"AddClean":          &hcldec.AttrSpec{Name: "add_clean", Type: cty.Bool, Required: false},
		"AddForce":          &hcldec.AttrSpec{Name: "add_force", Type: cty.Bool, Required: false},
		"AddInsecure":       &hcldec.AttrSpec{Name: "add_insecure", Type: cty.Bool, Required: false},
		"SkipPackage":       &hcldec.AttrSpec{Name: "skip_package", Type: cty.Bool, Required: false},
		"OutputVagrantfile": &hcldec.AttrSpec{Name: "output_vagrantfile", Type: cty.String, Required: false},
		"PackageInclude":    &hcldec.AttrSpec{Name: "package_include", Type: cty.List(cty.String), Required: false},
	}
	for k, v := range (&Config{}).HTTPConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ISOConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).FloppyConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).BootConfig.HCL2Spec() {
		s[k] = v
	}
	return s
}
