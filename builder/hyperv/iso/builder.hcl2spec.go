// Code generated by "hcl2-schema -type Config"; DO NOT EDIT.\n

package iso

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"DiskSize":                       &hcldec.AttrSpec{Name: "disk_size", Type: cty.Number, Required: false},
		"DiskBlockSize":                  &hcldec.AttrSpec{Name: "disk_block_size", Type: cty.Number, Required: false},
		"RamSize":                        &hcldec.AttrSpec{Name: "memory", Type: cty.Number, Required: false},
		"SecondaryDvdImages":             &hcldec.AttrSpec{Name: "secondary_iso_images", Type: cty.List(cty.String), Required: false},
		"GuestAdditionsMode":             &hcldec.AttrSpec{Name: "guest_additions_mode", Type: cty.String, Required: false},
		"GuestAdditionsPath":             &hcldec.AttrSpec{Name: "guest_additions_path", Type: cty.String, Required: false},
		"VMName":                         &hcldec.AttrSpec{Name: "vm_name", Type: cty.String, Required: false},
		"SwitchName":                     &hcldec.AttrSpec{Name: "switch_name", Type: cty.String, Required: false},
		"SwitchVlanId":                   &hcldec.AttrSpec{Name: "switch_vlan_id", Type: cty.String, Required: false},
		"MacAddress":                     &hcldec.AttrSpec{Name: "mac_address", Type: cty.String, Required: false},
		"VlanId":                         &hcldec.AttrSpec{Name: "vlan_id", Type: cty.String, Required: false},
		"Cpu":                            &hcldec.AttrSpec{Name: "cpus", Type: cty.Number, Required: false},
		"Generation":                     &hcldec.AttrSpec{Name: "generation", Type: cty.Number, Required: false},
		"EnableMacSpoofing":              &hcldec.AttrSpec{Name: "enable_mac_spoofing", Type: cty.Bool, Required: false},
		"UseLegacyNetworkAdapter":        &hcldec.AttrSpec{Name: "use_legacy_network_adapter", Type: cty.Bool, Required: false},
		"EnableDynamicMemory":            &hcldec.AttrSpec{Name: "enable_dynamic_memory", Type: cty.Bool, Required: false},
		"EnableSecureBoot":               &hcldec.AttrSpec{Name: "enable_secure_boot", Type: cty.Bool, Required: false},
		"SecureBootTemplate":             &hcldec.AttrSpec{Name: "secure_boot_template", Type: cty.String, Required: false},
		"EnableVirtualizationExtensions": &hcldec.AttrSpec{Name: "enable_virtualization_extensions", Type: cty.Bool, Required: false},
		"TempPath":                       &hcldec.AttrSpec{Name: "temp_path", Type: cty.String, Required: false},
		"Version":                        &hcldec.AttrSpec{Name: "configuration_version", Type: cty.String, Required: false},
		"KeepRegistered":                 &hcldec.AttrSpec{Name: "keep_registered", Type: cty.Bool, Required: false},
		"Communicator":                   &hcldec.AttrSpec{Name: "communicator", Type: cty.String, Required: false},
		"AdditionalDiskSize":             &hcldec.AttrSpec{Name: "disk_additional_size", Type: cty.List(cty.Number), Required: false},
		"SkipCompaction":                 &hcldec.AttrSpec{Name: "skip_compaction", Type: cty.Bool, Required: false},
		"SkipExport":                     &hcldec.AttrSpec{Name: "skip_export", Type: cty.Bool, Required: false},
		"DifferencingDisk":               &hcldec.AttrSpec{Name: "differencing_disk", Type: cty.Bool, Required: false},
		"FixedVHD":                       &hcldec.AttrSpec{Name: "use_fixed_vhd_format", Type: cty.Bool, Required: false},
		"Headless":                       &hcldec.AttrSpec{Name: "headless", Type: cty.Bool, Required: false},
	}
	for k, v := range (&Config{}).HTTPConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ISOConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).FloppyConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).BootConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).OutputConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).SSHConfig.HCL2Spec() {
		s[k] = v
	}
	for k, v := range (&Config{}).ShutdownConfig.HCL2Spec() {
		s[k] = v
	}
	return s
}
