// Code generated by "hcl2-schema -type Config,ModuleDir"; DO NOT EDIT.\n

package converge

import (
	"github.com/hashicorp/hcl2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Bootstrap":            &hcldec.AttrSpec{Name: "bootstrap", Type: cty.Bool, Required: false},
		"Version":              &hcldec.AttrSpec{Name: "version", Type: cty.String, Required: false},
		"BootstrapCommand":     &hcldec.AttrSpec{Name: "bootstrap_command", Type: cty.String, Required: false},
		"PreventBootstrapSudo": &hcldec.AttrSpec{Name: "prevent_bootstrap_sudo", Type: cty.Bool, Required: false},
		"Module":               &hcldec.AttrSpec{Name: "module", Type: cty.String, Required: false},
		"WorkingDirectory":     &hcldec.AttrSpec{Name: "working_directory", Type: cty.String, Required: false},
		"Params":               &hcldec.BlockAttrsSpec{TypeName: "params", ElementType: cty.String, Required: false},
		"ExecuteCommand":       &hcldec.AttrSpec{Name: "execute_command", Type: cty.String, Required: false},
		"PreventSudo":          &hcldec.AttrSpec{Name: "prevent_sudo", Type: cty.Bool, Required: false},
		"module_dirs":          &hcldec.BlockListSpec{TypeName: "[]ModuleDir", Nested: hcldec.ObjectSpec((&Config{}).ModuleDirs[0].HCL2Spec())},
	}
	return s
}

func (*ModuleDir) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"Source":      &hcldec.AttrSpec{Name: "source", Type: cty.String, Required: false},
		"Destination": &hcldec.AttrSpec{Name: "destination", Type: cty.String, Required: false},
		"Exclude":     &hcldec.AttrSpec{Name: "exclude", Type: cty.List(cty.String), Required: false},
	}
	return s
}
