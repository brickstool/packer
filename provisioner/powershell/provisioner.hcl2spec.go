// Code generated by "hcl2-schema -type Config"; DO NOT EDIT.\n

package powershell

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

func (*Config) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"RemoteEnvVarPath":       &hcldec.AttrSpec{Name: "remote_env_var_path", Type: cty.String, Required: false},
		"ElevatedExecuteCommand": &hcldec.AttrSpec{Name: "elevated_execute_command", Type: cty.String, Required: false},
		"StartRetryTimeout":      &hcldec.AttrSpec{Name: "start_retry_timeout", Type: cty.String, Required: false},
		"EnvVarFormat":           &hcldec.AttrSpec{Name: "envvarformat", Type: cty.String, Required: false},
		"ElevatedEnvVarFormat":   &hcldec.AttrSpec{Name: "elevated_env_var_format", Type: cty.String, Required: false},
		"ElevatedUser":           &hcldec.AttrSpec{Name: "elevated_user", Type: cty.String, Required: false},
		"ElevatedPassword":       &hcldec.AttrSpec{Name: "elevated_password", Type: cty.String, Required: false},
		"ExecutionPolicy":        (&Config{}).ExecutionPolicy.HCL2Spec(),
	}
	for k, v := range (&Config{}).Provisioner.HCL2Spec() {
		s[k] = v
	}
	return s
}
